{"version":3,"sources":["bg.png","components/Tweet/Tweet.js","components/LiveTweets/LiveTweets.js","components/TopUsers/TopUsers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tweet","tweet","extended_entities","media","className","map","index","ratio","width","sizes","large","w","height","h","key","src","media_url","alt","this","props","user","name","profile_image_url","screen_name","text","renderImgs","Component","LiveTweets","scrollToBottom","messagesEnd","scrollIntoView","behavior","transitionName","transitionEnterTimeout","transitionLeaveTimeout","data","id_str","ref","el","TopUsers","Object","keys","userid","sort","a","b","totalTweets","slice","socket","io","App","state","tweets","users","loadTweets","listenTweets","bind","bulkLoadTweets","oldTweets","length","console","log","_tweets","setState","s","d","i","push","setTimeout","on","e","fetch","then","res","json","catch","bg","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9f9fdd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.65c8e106.png\";","import React, { Component } from \"react\";\r\nimport \"./tweet.css\";\r\nexport default class Tweet extends Component {\r\n  renderImgs(tweet) {\r\n    if (tweet.extended_entities) {\r\n      if (tweet.extended_entities.media) {\r\n        return (\r\n          <div className=\"media\">\r\n            {tweet.extended_entities.media.map(\r\n              (media, index) => {\r\n                var maxWidth = 260;\r\n                var maxHeight = 260;\r\n                var ratio = 0;\r\n                var width = media.sizes.large.w;\r\n                var height = media.sizes.large.h;\r\n\r\n                if (width > maxWidth) {\r\n                  ratio = maxWidth / width;\r\n                  height = height * ratio;\r\n                  width = width * ratio;\r\n                }\r\n\r\n                if (height > maxHeight) {\r\n                  ratio = maxHeight / height;\r\n\r\n                  width = width * ratio;\r\n                  height = height * ratio;\r\n                }\r\n\r\n                return (\r\n                  <img\r\n                    width={width}\r\n                    height={height}\r\n                    key={index}\r\n                    src={media.media_url}\r\n                    alt={index}\r\n                  />\r\n                );\r\n              }\r\n            )}\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  render() {\r\n    let tweet = this.props.tweet;\r\n    return (\r\n      <div className=\"Tweet\">\r\n        <div className=\"user\">\r\n          <img\r\n            alt={tweet.user.name}\r\n            src={tweet.user.profile_image_url}\r\n          />\r\n          <div>\r\n            <div className=\"userfullname\">\r\n              {tweet.user.name}\r\n            </div>\r\n            <div className=\"username\">\r\n              @{tweet.user.screen_name}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"tweettext\">\r\n          {tweet.text}\r\n        </div>\r\n        {this.renderImgs(tweet)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ReactCSSTransitionGroup from \"react-addons-css-transition-group\";\r\nimport Tweet from \"../Tweet/Tweet\";\r\nexport default class LiveTweets extends Component {\r\n  scrollToBottom = () => {\r\n    this.messagesEnd.scrollIntoView({\r\n      behavior: \"auto\"\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"tweetsScroll\">\r\n        <ReactCSSTransitionGroup\r\n          transitionName=\"livetweet\"\r\n          transitionEnterTimeout={500}\r\n          transitionLeaveTimeout={300}\r\n        >\r\n          {this.props.data.map((tweet, index) => {\r\n            return (\r\n              <Tweet\r\n                key={tweet.id_str}\r\n                tweet={tweet}\r\n              />\r\n            );\r\n          })}\r\n          <div\r\n            ref={el => {\r\n              this.messagesEnd = el;\r\n            }}\r\n          />\r\n        </ReactCSSTransitionGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class TopUsers extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"TopUsers\">\r\n        {Object.keys(this.props.data)\r\n          .map((userid, index) => {\r\n            return this.props.data[userid];\r\n          })\r\n          .sort(function(a, b) {\r\n            return b.totalTweets - a.totalTweets;\r\n          })\r\n          .slice(0, 5)\r\n          .map((user, index) => (\r\n            <div\r\n              key={user.id_str}\r\n              className=\"user\"\r\n            >\r\n              <img\r\n                src={user.profile_image_url}\r\n                alt={user.name}\r\n              />\r\n              <div className=\"userfullname\">\r\n                {user.name}\r\n              </div>\r\n              <div className=\"username\">\r\n                @{user.screen_name}\r\n              </div>\r\n              <div className=\"usertotaltweet\">\r\n                {user.totalTweets}\r\n              </div>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport io from \"socket.io-client\";\nimport LiveTweets from \"./components/LiveTweets/LiveTweets\";\nimport TopUsers from \"./components/TopUsers/TopUsers\";\nimport bg from \"./bg.png\";\n\nexport let socket = io(\n  \"http://alphadevinfotech.com:3001/\"\n);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tweets: [],\n      users: {}\n    };\n\n    this.loadTweets = [];\n\n    this.listenTweets = this.listenTweets.bind(\n      this\n    );\n\n    this.bulkLoadTweets = this.bulkLoadTweets.bind(\n      this\n    );\n    this.oldTweets = 0;\n  }\n\n  bulkLoadTweets() {\n    if (this.loadTweets.length) {\n      console.log(\n        \"adding tweets\",\n        this.loadTweets.length\n      );\n      let _tweets = [...this.loadTweets];\n      this.loadTweets = [];\n      this.setState(\n        s => {\n          _tweets.map((d, i) => {\n            if (d.user.id_str in s.users) {\n              if (\n                !(\n                  d.text[0] === \"R\" &&\n                  d.text[1] === \"T\"\n                )\n              ) {\n                s.users[d.user.id_str]\n                  .totalTweets++;\n              }\n            } else {\n              d.user.totalTweets = 1;\n              s.users[d.user.id_str] = d.user;\n            }\n          });\n\n          _tweets.map(d => {\n            s.tweets.push(d);\n          });\n          return {\n            tweets: s.tweets,\n            users: s.users\n          };\n        },\n        () => {\n          setTimeout(() => {\n            this.bulkLoadTweets();\n          }, 200);\n        }\n      );\n    } else {\n      console.log(\"no tweets\");\n      setTimeout(() => {\n        this.bulkLoadTweets();\n      }, 100);\n    }\n  }\n\n  listenTweets() {\n    socket.on(\"tweet\", e => {\n      this.loadTweets.push(e);\n\n      // this.setState(s => {\n      //   // s.tweets = [e, ...s.tweets];\n      //   s.tweets.push(e);\n      //   //console.log(e);\n      //   if (e.user.id_str in s.users) {\n      //     s.users[e.user.id_str].totalTweets++;\n      //   } else {\n      //     e.user.totalTweets = 1;\n      //     s.users[e.user.id_str] = e.user;\n      //   }\n      //   return {\n      //     tweets: s.tweets,\n      //     users: s.users\n      //   };\n      // });\n    });\n  }\n\n  componentDidMount() {\n    fetch(\n      \"http://alphadevinfotech.com:3001/tweets\"\n    )\n      .then(res => {\n        res.json().then(tweets => {\n          console.log(tweets.length, \"tweets\");\n          let users = {};\n          tweets.map((d, i) => {\n            if (d.user.id_str in users) {\n              if (\n                !(\n                  d.text[0] === \"R\" &&\n                  d.text[1] === \"T\"\n                )\n              )\n                users[d.user.id_str]\n                  .totalTweets++;\n            } else {\n              d.user.totalTweets = 1;\n              users[d.user.id_str] = d.user;\n            }\n          });\n          this.oldTweets = tweets.length;\n          this.setState(\n            { tweets: [], users },\n            () => {\n              console.log(\"load tweets\");\n\n              this.bulkLoadTweets();\n            }\n          );\n        });\n      })\n      .catch(res => {\n        console.log(res);\n      });\n    this.listenTweets();\n  }\n\n  render() {\n    console.log(this.state);\n    return (\n      <div className=\"App\">\n        <div className=\"left\">\n          <div>\n            <div className=\"mtu\">\n              Most Tweeted Users\n            </div>\n            <TopUsers data={this.state.users} />\n          </div>\n          <div className=\"bg\">\n            <img src={bg} alt=\"bg\" />\n          </div>\n        </div>\n        <div className=\"right\">\n          <div className=\"totalNumber\">\n            Total Tweets{\" \"}\n            {this.state.tweets.length +\n              this.oldTweets}\n          </div>\n          <LiveTweets data={this.state.tweets} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}