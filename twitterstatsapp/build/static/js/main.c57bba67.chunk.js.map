{"version":3,"sources":["bg.png","components/Tweet/Tweet.js","components/LiveTweets/LiveTweets.js","components/TopUsers/TopUsers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tweet","media","ratio","width","aspect_ratio","height","video","variants","autoPlay","muted","loop","src","url","type","sizes","large","w","h","media_url","alt","tweet","extended_entities","length","hasVideo","className","this","renderVideo","video_info","renderImage","props","user","name","profile_image_url","screen_name","text","renderMedia","Component","LiveTweets","scrollToBottom","messagesEnd","scrollIntoView","behavior","transitionName","transitionEnterTimeout","transitionLeaveTimeout","data","map","index","key","id_str","ref","el","TopUsers","Object","keys","userid","sort","a","b","totalTweets","slice","socket","io","App","state","tweets","users","loadTweets","listenTweets","bind","listenCommands","bulkLoadTweets","console","log","_tweets","setState","s","d","i","push","setTimeout","on","e","document","location","reload","fetch","then","res","json","catch","bg","React","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c57bba67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.65c8e106.png\";","import React, { Component } from \"react\";\r\nimport \"./tweet.css\";\r\nexport default class Tweet extends Component {\r\n  renderVideo(media) {\r\n    var maxWidth = 260;\r\n    var maxHeight = 260;\r\n    var ratio = 0;\r\n    var width = media.aspect_ratio[0];\r\n    var height = media.aspect_ratio[1];\r\n\r\n    if (width > maxWidth) {\r\n      ratio = maxWidth / width;\r\n      height = height * ratio;\r\n      width = width * ratio;\r\n    }\r\n\r\n    if (height > maxHeight) {\r\n      ratio = maxHeight / height;\r\n\r\n      width = width * ratio;\r\n      height = height * ratio;\r\n    }\r\n    let video = media.variants[0];\r\n    if (!video) return null;\r\n\r\n    return (\r\n      <video\r\n        autoPlay\r\n        muted\r\n        loop\r\n        width={width}\r\n        height={height}\r\n      >\r\n        <source\r\n          src={video.url}\r\n          type=\"video/mp4\"\r\n        />\r\n      </video>\r\n    );\r\n  }\r\n\r\n  renderImage(media) {\r\n    var maxWidth = 260;\r\n    var maxHeight = 260;\r\n    var ratio = 0;\r\n    var width = media.sizes.large.w;\r\n    var height = media.sizes.large.h;\r\n\r\n    if (width > maxWidth) {\r\n      ratio = maxWidth / width;\r\n      height = height * ratio;\r\n      width = width * ratio;\r\n    }\r\n\r\n    if (height > maxHeight) {\r\n      ratio = maxHeight / height;\r\n\r\n      width = width * ratio;\r\n      height = height * ratio;\r\n    }\r\n\r\n    return (\r\n      <img\r\n        width={width}\r\n        height={height}\r\n        src={media.media_url}\r\n        alt=\"some alt\"\r\n      />\r\n    );\r\n  }\r\n  renderMedia(tweet) {\r\n    if (tweet.extended_entities) {\r\n      if (tweet.extended_entities.media) {\r\n        if (\r\n          tweet.extended_entities.media.length\r\n        ) {\r\n          let media =\r\n            tweet.extended_entities.media[0];\r\n          let hasVideo = \"video_info\" in media;\r\n          return (\r\n            <div className=\"media\">\r\n              {hasVideo\r\n                ? this.renderVideo(\r\n                    media.video_info\r\n                  )\r\n                : this.renderImage(media)}\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  render() {\r\n    let tweet = this.props.tweet;\r\n    return (\r\n      <div className=\"Tweet\">\r\n        <div className=\"user\">\r\n          <img\r\n            alt={tweet.user.name}\r\n            src={tweet.user.profile_image_url}\r\n          />\r\n          <div>\r\n            <div className=\"userfullname\">\r\n              {tweet.user.name}\r\n            </div>\r\n            <div className=\"username\">\r\n              @{tweet.user.screen_name}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"tweettext\">\r\n          {tweet.text}\r\n        </div>\r\n        {this.renderMedia(tweet)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ReactCSSTransitionGroup from \"react-addons-css-transition-group\";\r\nimport Tweet from \"../Tweet/Tweet\";\r\nexport default class LiveTweets extends Component {\r\n  scrollToBottom = () => {\r\n    this.messagesEnd.scrollIntoView({\r\n      behavior: \"auto\"\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"tweetsScroll\">\r\n        <ReactCSSTransitionGroup\r\n          transitionName=\"livetweet\"\r\n          transitionEnterTimeout={500}\r\n          transitionLeaveTimeout={300}\r\n        >\r\n          {this.props.data.map((tweet, index) => {\r\n            return (\r\n              <Tweet\r\n                key={tweet.id_str}\r\n                tweet={tweet}\r\n              />\r\n            );\r\n          })}\r\n          <div\r\n            ref={el => {\r\n              this.messagesEnd = el;\r\n            }}\r\n          />\r\n        </ReactCSSTransitionGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class TopUsers extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"TopUsers\">\r\n        {Object.keys(this.props.data)\r\n          .map((userid, index) => {\r\n            return this.props.data[userid];\r\n          })\r\n          .sort(function(a, b) {\r\n            return b.totalTweets - a.totalTweets;\r\n          })\r\n          .slice(0, 5)\r\n          .map((user, index) => (\r\n            <div\r\n              key={user.id_str}\r\n              className=\"user\"\r\n            >\r\n              <img\r\n                src={user.profile_image_url}\r\n                alt={user.name}\r\n              />\r\n              <div className=\"userfullname\">\r\n                {user.name}\r\n              </div>\r\n              <div className=\"username\">\r\n                @{user.screen_name}\r\n              </div>\r\n              <div className=\"usertotaltweet\">\r\n                {user.totalTweets}\r\n              </div>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport io from \"socket.io-client\";\nimport LiveTweets from \"./components/LiveTweets/LiveTweets\";\nimport TopUsers from \"./components/TopUsers/TopUsers\";\nimport bg from \"./bg.png\";\n\nlet SERVER_URL = \"http://localhost:3001\";\n\nexport let socket = io(SERVER_URL);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tweets: [],\n      users: {},\n      totalTweets: 0\n    };\n\n    this.loadTweets = [];\n\n    this.listenTweets = this.listenTweets.bind(\n      this\n    );\n\n    this.listenCommands = this.listenCommands.bind(\n      this\n    );\n\n    this.bulkLoadTweets = this.bulkLoadTweets.bind(\n      this\n    );\n  }\n\n  bulkLoadTweets() {\n    if (this.loadTweets.length) {\n      console.log(\n        \"adding tweets\",\n        this.loadTweets.length\n      );\n      let _tweets = [...this.loadTweets];\n      this.loadTweets = [];\n      this.setState(\n        s => {\n          _tweets.map((d, i) => {\n            if (d.user.id_str in s.users) {\n              s.users[d.user.id_str]\n                .totalTweets++;\n            } else {\n              d.user.totalTweets = 1;\n              s.users[d.user.id_str] = d.user;\n            }\n          });\n\n          _tweets.map(d => {\n            s.tweets.push(d);\n          });\n          return {\n            tweets: s.tweets,\n            users: s.users\n          };\n        },\n        () => {\n          setTimeout(() => {\n            this.bulkLoadTweets();\n          }, 200);\n        }\n      );\n    } else {\n      //  console.log(\"no tweets\");\n      setTimeout(() => {\n        this.bulkLoadTweets();\n      }, 100);\n    }\n  }\n\n  listenTweets() {\n    socket.on(\"tweet\", e => {\n      this.loadTweets.push(e);\n    });\n  }\n\n  listenCommands() {\n    socket.on(\"reload\", e => {\n      document.location.reload();\n    });\n  }\n\n  componentDidMount() {\n    fetch(`${SERVER_URL}/tweets`)\n      .then(res => {\n        res.json().then(data => {\n          console.log(data, \"data from api\");\n\n          this.setState(data, () => {\n            console.log(\"tweets loaded tweets\");\n            this.bulkLoadTweets();\n          });\n        });\n      })\n      .catch(res => {\n        console.log(res);\n      });\n    this.listenTweets();\n    this.listenCommands();\n  }\n\n  render() {\n    console.log(this.state);\n    return (\n      <div className=\"App\">\n        <div className=\"left\">\n          <div>\n            <div className=\"mtu\">\n              Most Tweeted Users\n            </div>\n            <TopUsers data={this.state.users} />\n          </div>\n          <div className=\"bg\">\n            <img src={bg} alt=\"bg\" />\n          </div>\n        </div>\n        <div className=\"right\">\n          <div className=\"totalNumber\">\n            Total Tweets{\" \"}\n            {this.state.tweets.length +\n              this.state.totalTweets}\n          </div>\n          <LiveTweets data={this.state.tweets} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}